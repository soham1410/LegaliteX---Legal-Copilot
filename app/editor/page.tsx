"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import {
  Bold,
  Italic,
  Underline,
  AlignLeft,
  AlignCenter,
  AlignRight,
  AlignJustify,
  List,
  ListOrdered,
  Save,
  Download,
  PrinterIcon as Print,
  Undo,
  Redo,
  Scale,
  Bot,
  FileText,
  Settings,
  Share,
  Plus,
  Search,
} from "lucide-react"
import Link from "next/link"
import { useSearchParams } from "next/navigation"
import { useDocument } from "@/hooks/use-document"
import { ShareModal } from "@/components/share-modal"

const documentTemplates = {
  notices: "Legal Notice Template",
  will: "Last Will & Testament Template",
  plaintiff: "Plaintiff Document Template",
  "preceding-drafts": "Preceding Draft Template",
  contracts: "Contract Agreement Template",
}

export default function EditorPage() {
  const searchParams = useSearchParams()
  const docType = searchParams.get("type") || "contract"
  const [isAIAssistantOpen, setIsAIAssistantOpen] = useState(false)
  const [aiPrompt, setAiPrompt] = useState("")
  const [isShareModalOpen, setIsShareModalOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  const [searchResults, setSearchResults] = useState<any[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const editorRef = useRef<HTMLDivElement>(null)

  const { document, isSaving, isGenerating, lastSaved, handleSave, handleGenerateAI, updateDocument, exportDocument } =
    useDocument({
      title: `Untitled ${documentTemplates[docType as keyof typeof documentTemplates] || "Document"}`,
      content: "",
      type: docType,
    })

  const formatText = (command: string, value?: string) => {
    document.execCommand(command, false, value)
    editorRef.current?.focus()
    updateContentFromEditor()
  }

  const updateContentFromEditor = () => {
    if (editorRef.current) {
      updateDocument({ content: editorRef.current.innerHTML })
    }
  }

  const insertAIContent = async () => {
    if (aiPrompt.trim() && editorRef.current) {
      const aiContent = await handleGenerateAI(aiPrompt)

      if (aiContent) {
        const selection = window.getSelection()
        if (selection && selection.rangeCount > 0) {
          const range = selection.getRangeAt(0)
          const contentDiv = document.createElement("div")
          contentDiv.innerHTML = aiContent
          range.insertNode(contentDiv)
          updateContentFromEditor()
        }
      }

      setAiPrompt("")
      setIsAIAssistantOpen(false)
    }
  }

  const handlePrint = () => {
    window.print()
  }

  const handleDownload = async (format: "pdf" | "docx") => {
    const result = await exportDocument(format)
    if (!result.success) {
      alert(`Failed to export as ${format.toUpperCase()}: ${result.message}`)
    }
  }

  const handleSearch = async () => {
    if (!searchQuery.trim()) return

    setIsSearching(true)
    try {
      const response = await fetch(`/api/documents/search?q=${encodeURIComponent(searchQuery)}&type=${docType}`)
      const result = await response.json()
      setSearchResults(result.results || [])
    } catch (error) {
      console.error("Search failed:", error)
    } finally {
      setIsSearching(false)
    }
  }

  const insertSuggestedClause = async (clauseType: string) => {
    const aiContent = await handleGenerateAI(clauseType)

    if (aiContent && editorRef.current) {
      const contentDiv = document.createElement("div")
      contentDiv.innerHTML = aiContent
      editorRef.current.appendChild(contentDiv)
      updateContentFromEditor()
    }
  }

  useEffect(() => {
    // Initialize document with basic template
    if (editorRef.current && !document.content) {
      const initialContent = `
        <div style="max-width: 8.5in; margin: 0 auto; padding: 1in; background: white; min-height: 11in; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 2em;">
            <h1 style="font-size: 18px; font-weight: bold; margin-bottom: 0.5em;">${documentTemplates[docType as keyof typeof documentTemplates] || "Legal Document"}</h1>
            <p style="color: #666; font-size: 14px;">Generated by Legalitex</p>
          </div>
          <div style="margin-bottom: 2em;">
            <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
            <p><strong>Document Type:</strong> ${documentTemplates[docType as keyof typeof documentTemplates] || "Legal Document"}</p>
          </div>
          <div>
            <p>Click here to start writing your document or use the AI Assistant to generate content...</p>
          </div>
        </div>
      `
      editorRef.current.innerHTML = initialContent
      updateDocument({ content: initialContent })
    }
  }, [docType])

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-4 py-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <Scale className="w-5 h-5 text-white" />
              </div>
              <span className="font-semibold text-gray-900">Legalitex</span>
            </Link>
            <Separator orientation="vertical" className="h-6" />
            <div className="flex items-center space-x-2">
              <FileText className="w-4 h-4 text-gray-600" />
              <Input
                value={document.title}
                onChange={(e) => updateDocument({ title: e.target.value })}
                className="border-none bg-transparent text-sm font-medium focus:bg-white focus:border focus:border-gray-300 min-w-[300px]"
              />
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Badge
              variant="secondary"
              className={isSaving ? "bg-yellow-100 text-yellow-800" : "bg-green-100 text-green-800"}
            >
              {isSaving ? "Saving..." : lastSaved ? "Auto-saved" : "Unsaved"}
            </Badge>
            <Button variant="outline" size="sm" onClick={() => setIsShareModalOpen(true)}>
              <Share className="w-4 h-4 mr-2" />
              Share
            </Button>
            <Button size="sm" className="bg-blue-600 hover:bg-blue-700" onClick={handleSave} disabled={isSaving}>
              <Save className="w-4 h-4 mr-2" />
              {isSaving ? "Saving..." : "Save"}
            </Button>
          </div>
        </div>
      </header>

      {/* Toolbar */}
      <div className="bg-white border-b border-gray-200 px-4 py-2">
        <div className="flex items-center space-x-1 flex-wrap gap-y-2">
          {/* File Operations */}
          <div className="flex items-center space-x-1">
            <Button variant="ghost" size="sm" onClick={() => formatText("undo")}>
              <Undo className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("redo")}>
              <Redo className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={handlePrint}>
              <Print className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => handleDownload("pdf")}>
              <Download className="w-4 h-4" />
            </Button>
          </div>

          <Separator orientation="vertical" className="h-6" />

          {/* Text Formatting */}
          <div className="flex items-center space-x-1">
            <select
              className="px-2 py-1 border border-gray-300 rounded text-sm"
              onChange={(e) => formatText("fontName", e.target.value)}
            >
              <option value="Times New Roman">Times New Roman</option>
              <option value="Arial">Arial</option>
              <option value="Calibri">Calibri</option>
            </select>
            <select
              className="px-2 py-1 border border-gray-300 rounded text-sm"
              onChange={(e) => formatText("fontSize", e.target.value)}
            >
              <option value="3">12</option>
              <option value="2">11</option>
              <option value="4">14</option>
              <option value="5">16</option>
            </select>
          </div>

          <Separator orientation="vertical" className="h-6" />

          <div className="flex items-center space-x-1">
            <Button variant="ghost" size="sm" onClick={() => formatText("bold")}>
              <Bold className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("italic")}>
              <Italic className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("underline")}>
              <Underline className="w-4 h-4" />
            </Button>
          </div>

          <Separator orientation="vertical" className="h-6" />

          {/* Alignment */}
          <div className="flex items-center space-x-1">
            <Button variant="ghost" size="sm" onClick={() => formatText("justifyLeft")}>
              <AlignLeft className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("justifyCenter")}>
              <AlignCenter className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("justifyRight")}>
              <AlignRight className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("justifyFull")}>
              <AlignJustify className="w-4 h-4" />
            </Button>
          </div>

          <Separator orientation="vertical" className="h-6" />

          {/* Lists */}
          <div className="flex items-center space-x-1">
            <Button variant="ghost" size="sm" onClick={() => formatText("insertUnorderedList")}>
              <List className="w-4 h-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={() => formatText("insertOrderedList")}>
              <ListOrdered className="w-4 h-4" />
            </Button>
          </div>

          <Separator orientation="vertical" className="h-6" />

          {/* AI Assistant */}
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsAIAssistantOpen(!isAIAssistantOpen)}
            className="bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100"
          >
            <Bot className="w-4 h-4 mr-2" />
            AI Assistant
          </Button>
        </div>
      </div>

      {/* AI Assistant Panel */}
      {isAIAssistantOpen && (
        <div className="bg-blue-50 border-b border-blue-200 px-4 py-3">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center space-x-3">
              <Bot className="w-5 h-5 text-blue-600" />
              <div className="flex-1">
                <Input
                  placeholder="Describe what you want to generate (e.g., 'Create a confidentiality clause for software development')"
                  value={aiPrompt}
                  onChange={(e) => setAiPrompt(e.target.value)}
                  className="bg-white"
                  onKeyPress={(e) => e.key === "Enter" && insertAIContent()}
                />
              </div>
              <Button
                onClick={insertAIContent}
                size="sm"
                className="bg-blue-600 hover:bg-blue-700"
                disabled={isGenerating}
              >
                {isGenerating ? "Generating..." : "Generate"}
              </Button>
              <Button variant="ghost" size="sm" onClick={() => setIsAIAssistantOpen(false)}>
                ×
              </Button>
            </div>
            <p className="text-xs text-blue-600 mt-2">
              💡 Try: "Add a termination clause", "Generate payment terms", "Create liability limitations"
            </p>
          </div>
        </div>
      )}

      {/* Main Editor Area */}
      <div className="flex-1 flex">
        {/* Sidebar */}
        <div className="w-64 bg-white border-r border-gray-200 p-4">
          <div className="space-y-4">
            <div>
              <h3 className="font-medium text-gray-900 mb-2">Document Outline</h3>
              <div className="space-y-1 text-sm">
                <div className="p-2 hover:bg-gray-100 rounded cursor-pointer">1. Header</div>
                <div className="p-2 hover:bg-gray-100 rounded cursor-pointer">2. Parties</div>
                <div className="p-2 hover:bg-gray-100 rounded cursor-pointer">3. Terms</div>
                <div className="p-2 hover:bg-gray-100 rounded cursor-pointer">4. Signatures</div>
              </div>
            </div>

            <Separator />

            <div>
              <h3 className="font-medium text-gray-900 mb-2">AI Suggestions</h3>
              <div className="space-y-2">
                <Button
                  variant="ghost"
                  size="sm"
                  className="w-full justify-start text-xs"
                  onClick={() => insertSuggestedClause("jurisdiction clause")}
                >
                  <Plus className="w-3 h-3 mr-2" />
                  Add jurisdiction clause
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  className="w-full justify-start text-xs"
                  onClick={() => insertSuggestedClause("dispute resolution")}
                >
                  <Plus className="w-3 h-3 mr-2" />
                  Include dispute resolution
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  className="w-full justify-start text-xs"
                  onClick={() => insertSuggestedClause("force majeure")}
                >
                  <Plus className="w-3 h-3 mr-2" />
                  Add force majeure
                </Button>
              </div>
            </div>

            <Separator />

            <div>
              <h3 className="font-medium text-gray-900 mb-2">Quick Actions</h3>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Input
                    placeholder="Search..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="text-xs"
                    onKeyPress={(e) => e.key === "Enter" && handleSearch()}
                  />
                  <Button variant="ghost" size="sm" onClick={handleSearch} disabled={isSearching}>
                    <Search className="w-3 h-3" />
                  </Button>
                </div>
                <Button variant="ghost" size="sm" className="w-full justify-start text-xs">
                  <Settings className="w-3 h-3 mr-2" />
                  Document Settings
                </Button>
              </div>

              {searchResults.length > 0 && (
                <div className="mt-2 space-y-1">
                  <p className="text-xs font-medium">Search Results:</p>
                  {searchResults.map((result, index) => (
                    <div key={index} className="text-xs p-2 bg-gray-50 rounded">
                      <span className="font-medium">{result.text}</span>
                      <p className="text-gray-600">{result.context}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Editor */}
        <div className="flex-1 p-8 overflow-auto">
          <div className="max-w-4xl mx-auto">
            <div
              ref={editorRef}
              contentEditable
              className="min-h-[800px] bg-white shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
              style={{
                fontFamily: "Times New Roman, serif",
                fontSize: "12pt",
                lineHeight: "1.6",
                padding: "1in",
                width: "8.5in",
                minHeight: "11in",
              }}
              onInput={updateContentFromEditor}
            />
          </div>
        </div>
      </div>

      {/* Status Bar */}
      <div className="bg-white border-t border-gray-200 px-4 py-2 text-xs text-gray-600">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <span>Page 1 of 1</span>
            <span>
              Words:{" "}
              {
                document.content
                  .replace(/<[^>]*>/g, "")
                  .split(/\s+/)
                  .filter((word) => word.length > 0).length
              }
            </span>
            <span>Characters: {document.content.replace(/<[^>]*>/g, "").length}</span>
          </div>
          <div className="flex items-center space-x-4">
            <span>100%</span>
            <span>English (US)</span>
            <Button variant="ghost" size="sm" onClick={() => handleDownload("docx")} className="text-xs">
              Export as Word
            </Button>
          </div>
        </div>
      </div>

      {/* Share Modal */}
      <ShareModal
        isOpen={isShareModalOpen}
        onClose={() => setIsShareModalOpen(false)}
        documentId={document.id || "temp"}
        documentTitle={document.title}
      />
    </div>
  )
}
